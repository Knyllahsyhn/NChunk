# .github/workflows/release.yml
name: Publish to PyPI & GitHub Release

on:
  push:
    tags:
      - "v*"           # löst bei z. B. v0.4.1 aus

permissions:
  contents: write      # zum Anlegen der GitHub-Release
  id-token: write      # für OIDC-Login bei PyPI

jobs:
  build-publish:
    runs-on: ubuntu-latest

    steps:
      # 1) Code holen – ganze History + Tags
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      # 2) Python installieren
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # 3) Abhängigkeiten für Build
      - name: Install hatchling & build
        run: |
          python -m pip install --upgrade build

      # 4) Paket bauen (wheel + sdist liegen unter dist/)
      - name: Build package
        run: python -m build

      # 5) Nach PyPI hochladen (OIDC)
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          # skip-existing: true   # optional: überschreibt nicht, falls Tag neu gepusht

      # 6) GitHub-Release erstellen + Artefakte anhängen
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}   # v0.4.1
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            dist/*.whl
            dist/*.tar.gz
